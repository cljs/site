=== Compiled
*clojurescript-version*
*target*

=== Command Line
*command-line-args*
*main-cli-fn*

=== Arithmetic
*
+
-
/
divide
quot
rem
mod
inc
dec
identity

=== Min/Max
min
max
min-key
max-key

=== Boolean
and
or
not

=== Equality
=
not=
==
identical?
IEquiv

=== Comparison
<
>
<=
>=
compare
comparator
IComparable

=== Number sign?
pos?
neg?
zero?

=== Integer sign?
pos-int?
neg-int?
nat-int?

=== Integer kind?
integer?
int?
odd?
even?

=== Double kind?
number?
double?
float?
infinite?

=== Boolean kind?
boolean?
false?
true?

=== Null?
nil?
undefined?

=== Not null?
some?

=== Any kind?
any?

=== String kind?
string?
char?

=== String
str
subs

=== Regex
re-find
re-matches
re-pattern
re-seq
regexp?

=== Cast
boolean
char
int

=== Bitwise
bit-and
bit-and-not
bit-clear
bit-count
bit-flip
bit-not
bit-or
bit-set
bit-shift-left
bit-shift-right
bit-shift-right-zero-fill
bit-test
bit-xor
unsigned-bit-shift-right
int-rotate-left

=== REPL results
*1
*2
*3
*e

=== REPL load
require
require-macros
import
import-macros
use
use-macros
refer-clojure
load
load-file
load-namespace
*loaded-libs*

=== Exceptions
try
catch
finally
throw

=== Exception info
ex-info
ex-message
ex-data
ex-cause

=== Assert
assert
*assert*

=== Transient
transient
persistent!
conj!
pop!
assoc!
dissoc!
disj!

=== Volatile
volatile!
vswap!
vreset!
volatile?

=== Atom Ref
atom
swap!
reset!
compare-and-set!
swap-vals!
reset-vals!
set-validator!
get-validator

=== Watch
add-watch
remove-watch
IWatchable

=== Delay Ref
delay
force
delay?

=== Deref
deref
IDeref

=== Pending
realized?
IPending

=== Locking
locking

=== Metadata
meta
with-meta
vary-meta
reset-meta!
alter-meta!

=== Vars
def
defonce
goog-define
declare

=== Var meta
var
var?
exists?
resolve
set!
test

=== Namespace
ns
ns*

=== Namespace meta
*ns*
find-ns
find-ns-obj
find-macros-ns
in-ns
create-ns
ns-imports
ns-interns
ns-interns*
ns-name
ns-publics
ns-unmap
NS_CACHE

=== Eval
eval
*eval*

=== Bindings
let
let*
letfn
letfn*
binding
with-redefs

=== If
if
if-not
if-some
if-let

=== When
when
when-not
when-some
when-first
when-let

=== Case
case
case*

=== Cond
cond
condp

=== Conditional threading
cond->
cond->>
some->
some->>

=== Threading
->
->>
as->

=== Wrap
do
comment
quote

=== Nested/Filtered loop
for
doseq

=== Recursion
loop
loop*
recur
trampoline

=== Other loops
while
dotimes

=== Lazy
lazy-seq
lazy-cat

=== Lazy forcing
doall
dorun
run!

=== Functions
defn
defn-
fn
fn*
fn?
apply

=== Macro
defmacro
macroexpand
macroexpand-1
gensym

=== Multimethod
defmulti
defmethod
get-method
methods
prefer-method
prefers
remove-method
remove-all-methods
default-dispatch-val
dispatch-fn

=== Hierarchy
make-hierarchy
derive
underive
parents
ancestors
descendants
isa?

=== Protocol
defprotocol
extend-protocol

=== Type
deftype
deftype*
extend-type

=== Type meta
type
type->str
satisfies?
instance?
implements?
is_proto_
PROTOCOL_SENTINEL

=== Record
defrecord
defrecord*
record?

=== Ad-hoc Instance
reify
specify
specify!

=== Tagged Literal
tagged-literal
tagged-literal?

=== Timing
system-time
time
simple-benchmark

=== Time instance
inst-ms
inst?

=== Coll content?
contains?
distinct?
empty?
every?
not-every?
some
not-any?

=== Coll capability?
sequential?
associative?
sorted?
counted?
reversible?
seqable?
indexed?
iterable?

=== Coll type
coll?
seq?
vector?
list?
map?
set?

=== Coll capability interfaces
ISequential
IAssociative
ISorted
ICounted
IReversible
ISeqable
IIndexed
IIterable

=== Coll type interfaces
ICollection
ISeq
IVector
IList
IMap
ISet

=== Coll->Seq
seq
cons

=== JS->Seq
prim-seq
array-seq

=== Tree->Seq
tree-seq

=== Seq->Collection
vec
set

=== Args->Collection
list
list*
vector
hash-map
array-map
sorted-map
sorted-map-by
hash-set
sorted-set
sorted-set-by
obj-map

=== Count
count
bounded-count

=== Head/Tail
first
second
next
rest
last
butlast

=== Head/Tail nested
ffirst
nnext
nfirst
fnext

=== Nth
nth
nthnext
nthrest

=== Take
take
take-nth
take-last
take-while

=== Drop
drop
drop-last
drop-while

=== Filter
filter
filterv
remove

=== Keep
keep
keep-indexed

=== Map
map
mapv
map-indexed
mapcat
replace

=== Combine
concat
flatten
merge
merge-with
interleave
interpose

=== Duplicates
dedupe
distinct
frequencies

=== Partition
partition
partition-all
partition-by

=== Split
split-at
split-with
group-by

=== Rearrange
sort
sort-by
shuffle

=== Collection add
conj
into
assoc
assoc-in

=== Collection update
update
update-in

=== Collection get
get
get-in
select-keys
peek

=== Collection remove
disj
dissoc
pop

=== Collection clear
empty
not-empty

=== Map entries
keys
vals
zipmap
key
val
find
map-entry?

=== Reverse
rseq
reverse

=== Sub
subseq
rsubseq
subvec

=== Repeat
cycle
repeat
replicate
iterate
range

=== Derive function
partial
constantly
repeatedly
comp
complement
some-fn
every-pred
fnil
juxt
memoize

=== Transduce
transduce
eduction
into
sequence

=== Transduce utils
cat
halt-when
completing

=== Reduce
reduce
reduce-kv
reduced
reduced?
ensure-reduced
unreduced
reduceable?
reductions

=== Clone
clone
cloneable?
ICloneable

=== JSON<>EDN
js->clj
clj->js
key->js

=== JS kind?
array?
object?
js-iterable?
js-symbol?
uri?

=== JS array
array
aget
aset
alength
amap
areduce
aclone

=== JS array others
make-array
object-array
to-array
to-array-2d
into-array

=== JS object
js-obj
js-keys

=== JS interop
.
..
doto
memfn
new

=== JS arguments
js-arguments
copy-arguments

=== JS syntax
js*
js-comment
js-debugger
js-delete
js-in
js-inline-comment
js-invoke
js-mod
js-reserved
js-str
this-as

=== Random
rand
rand-int
rand-nth
random-sample

=== UUID
random-uuid
uuid
uuid?

=== Name create
keyword
symbol

=== Name extract
name
namespace

=== Name munge
munge
demunge
CHAR_MAP
DEMUNGE_MAP
DEMUNGE_PATTERN

=== Name kind?
keyword?
symbol?
ident?

=== Name qualified?
qualified-keyword?
qualified-symbol?
qualified-ident?

=== Name unqualified?
simple-keyword?
simple-symbol?
simple-ident?

=== Name reserved?
special-symbol?

=== Name identical?
keyword-identical?
symbol-identical?

=== Machine-readable printing
pr
prn

=== Human-readable printing
print
println

=== Machine-readable string
pr-str
pr-str*
pr-str-with-opts
prn-str
prn-str-with-opts

=== Human-readable string
print-str
println-str

=== Print core
string-print
newline
with-out-str
flush

=== Print settings
*print-dup*
*print-err-fn*
*print-fn*
*print-fn-bodies*
*print-length*
*print-level*
*print-meta*
*print-namespace-maps*
*print-newline*
*print-readably*
*flush-on-newline*
*out*
set-print-fn!
set-print-err-fn!
enable-console-print!

=== Tap
add-tap
remove-tap
tap>
*exec-tap-fn*

=== Hashing
hash
hash-combine
hash-keyword
hash-string
hash-string*
hash-ordered-coll
hash-unordered-coll
mix-collection-hash
string-hash-cache
string-hash-cache-count
add-to-string-hash-cache

=== Unchecked
unchecked-add
unchecked-add-int
unchecked-byte
unchecked-char
unchecked-dec
unchecked-dec-int
unchecked-divide-int
unchecked-double
unchecked-float
unchecked-get
unchecked-inc
unchecked-inc-int
unchecked-int
unchecked-long
unchecked-multiply
unchecked-multiply-int
unchecked-negate
unchecked-negate-int
unchecked-remainder-int
unchecked-set
unchecked-short
unchecked-subtract
unchecked-subtract-int

=== Coercive
coercive-=
coercive-boolean
coercive-not
coercive-not=

=== MurmurHash3
m3-C1
m3-C2
m3-fmix
m3-hash-int
m3-hash-unencoded-chars
m3-mix-H1
m3-mix-K1
m3-seed

=== ES6 Iteration
es6-entries-iterator
es6-iterable
es6-iterator
es6-iterator-seq
es6-set-entries-iterator

=== Chunk
chunk
chunk-append
chunk-buffer
chunk-cons
chunk-first
chunk-next
chunk-rest

=== Dummy Cast
byte
short
long
float
double

=== Dummy Cast Many
booleans
chars
bytes
shorts
ints
longs
floats
doubles

=== Arrays
double-array
long-array
int-array

=== Iters
iter
array-iter
nil-iter
seq-iter
string-iter
